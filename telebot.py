import asyncio
import logging
import sys
from aiogram.fsm.state import StatesGroup, State
import random
from config import TBOT_API
from game import BullsCows, Cities
from keyboard import make_keyboard_games, make_keyboard_lvl

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message


levels = ("–ª–µ–≥–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "—Å–ª–æ–∂–Ω—ã–π")
stop = ("stop", "quit", "–∑–∞–∫–æ–Ω—á–∏—Ç—å", "—Å—Ç–æ–ø", "–≤—ã—Ö–æ–¥")
b_names = {0: "–±—ã–∫–æ–≤",
           1: "–±—ã–∫",
           2: "–±—ã–∫–∞",
           3: "–±—ã–∫–∞",
           4: "–±—ã–∫–∞",
           5: "–±—ã–∫–æ–≤"}

c_names = {0: "–∫–æ—Ä–æ–≤",
           1: "–∫–æ—Ä–æ–≤–∞",
           2: "–∫–æ—Ä–æ–≤—ã",
           3: "–∫–æ—Ä–æ–≤—ã",
           4: "–∫–æ—Ä–æ–≤—ã",
           5: "–∫–æ—Ä–æ–≤"}


# –ó–∞–ø—É—Å–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()


class Games(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤ –≤ –¥–∏–∞–ª–æ–≥–µ"""
    choosing_game = State()
    bools_cows_level = State()
    bools_cows = State()
    cities_level = State()
    cities = State()


@dp.message(Command('start'))
async def command_start_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
                         f"–í –∫–∞–∫—É—é –∏–≥—Ä—É —Å—ã–≥—Ä–∞–µ–º?", reply_markup=make_keyboard_games())
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
    await state.set_state(Games.choosing_game)


@dp.message(Games.choosing_game)
async def choose_game(message: Message, state: FSMContext) -> None:
    """–û—Ç—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä –∏–≥—Ä—ã"""
    if message.text.lower() == "–±—ã–∫–∏ –∏ –∫–æ—Ä–æ–≤—ã":
        await state.set_state(Games.bools_cows_level)
        await message.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!")
        await message.answer("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ, —Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ü–∏—Ñ—Ä. "
                             "–ï—Å–ª–∏ —Ü–∏—Ñ—Ä–∞ –µ—Å—Ç—å –≤ —á–∏—Å–ª–µ, –Ω–æ —Å—Ç–æ–∏—Ç –Ω–µ –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ - —ç—Ç–æ –∫–æ—Ä–æ–≤–∞. "
                             "–ï—Å–ª–∏ —Ü–∏—Ñ—Ä–∞ —Å—Ç–æ–∏—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ - —ç—Ç–æ –±—ã–∫. –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã –Ω–∞–±–µ—Ä–∏—Ç–µ <i>–≤—ã—Ö–æ–¥</i>."
                             "\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä—ã:",
                             reply_markup=make_keyboard_lvl(levels))
    elif message.text.lower() == "–≥–æ—Ä–æ–¥–∞ —Ä–æ—Å—Å–∏–∏":
        await state.set_state(Games.cities_level)
        await message.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!")
        await message.answer("–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑—ã–≤–∞—Ç—å –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é "
                             "–±—É–∫–≤—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞. –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã –Ω–∞–±–µ—Ä–∏—Ç–µ <i>–≤—ã—Ö–æ–¥</i>."
                             "\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä—ã:",
                             reply_markup=make_keyboard_lvl(levels))
    else:
        await state.set_state(Games.choosing_game)
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É?", reply_markup=make_keyboard_games())


@dp.message(Games.cities_level)
async def choose_cities_level(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –∏–≥—Ä—ã –≥–æ—Ä–æ–¥–∞"""
    if message.text.lower() in levels:
        if message.text.lower() == levels[0]:
            city_game = Cities("1")
        elif message.text.lower() == levels[1]:
            city_game = Cities("2")
        elif message.text.lower() == levels[2]:
            city_game = Cities("3")
        await state.update_data(cities=city_game)
        await state.set_state(Games.cities)
        await message.answer(text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏ –Ω–∞ –±—É–∫–≤—É {city_game.last_char.upper()}",
                             reply_markup=types.ReplyKeyboardRemove())
    elif message.text == "<  –ö –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã":
        await state.set_state(Games.choosing_game)
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É",
                             reply_markup=make_keyboard_games())
    else:
        await state.set_state(Games.cities_level)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä—ã:",
                             reply_markup=make_keyboard_lvl(levels))


@dp.message(Games.bools_cows_level)
async def choose_bulls_cows_level(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –∏–≥—Ä—ã –±—ã–∫–∏ –∏ –∫–æ—Ä–æ–≤—ã"""
    if message.text.lower() in levels:
        if message.text.lower() == levels[0]:
            n = "3"
        elif message.text.lower() == levels[1]:
            n = "4"
        elif message.text.lower() == levels[2]:
            n = "5"
        await state.update_data(bc=BullsCows(n))
        await state.set_state(Games.bools_cows)
        await message.answer(text=f"–í–≤–µ–¥–∏—Ç–µ {n}-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ",
                             reply_markup=types.ReplyKeyboardRemove())
    elif message.text == "<  –ö –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã":
        await state.set_state(Games.choosing_game)
        await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É",
                             reply_markup=make_keyboard_games())
    else:
        await state.set_state(Games.bools_cows_level)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä—ã:",
                             reply_markup=make_keyboard_lvl(levels))


@dp.message(Games.cities)
async def run_game_cities(message: Message, state: FSMContext):
    data = await state.get_data()
    city = data['cities']
    check = city.check_city(message.text)
    if check[0]:
        city_last_char = city.get_last_char(message.text)
        next_city = city.random_city(city_last_char)
        next_city_last_char = city.get_last_char(next_city).upper()
        if next_city:
            await message.answer(random.choice(["üòÄ", "üòú", "ü§ó", "üî•", "ü•≥", "üéä"]))
            await message.answer(f"{check[1]}\n\n{next_city}\n"
                                 f"–ù–∞–∑–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞ –±—É–∫–≤—É "
                                 f"<b>{next_city_last_char}</b>")
        else:
            await state.set_state(Games.cities_level)
            await message.answer("üíù")
            await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é üéâ, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏!",
                                 reply_markup=make_keyboard_lvl(levels))
    else:
        if message.text.lower() in stop:
            await exit_game(message, state)
        else:
            await message.answer("üòè")
            await message.answer(f"{check[1]}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")


@dp.message(Games.bools_cows)
async def run_game_bulls_cows(message: Message, state: FSMContext):
    """"""
    # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    bc = data['bc']
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    check = bc.check_number(message.text)
    if check[0]:
        b, c = bc.check_bulls_cows(message.text)
        await message.answer(f"{b} - {b_names[b]} {b * 'ü¶Ñ'}, {c} - {c_names[c]} {c * 'üêÆ'}")
        if b == 0 and c == 0:
            await message.answer("üí©")

        # –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã, –∫–æ–≥–¥–∞ –≤—Å–µ –±—ã–∫–∏ —É–≥–∞–¥–∞–Ω—ã
        if b == bc.num_digits:
            # –í–æ–∑–≤—Ä–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∏–≥—Ä—ã
            await state.set_state(Games.bools_cows_level)
            await message.answer("üíù")
            await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é üéâ, –≤—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ –∑–∞ {bc.attempts} –ø–æ–ø—ã—Ç–æ–∫!",
                                 reply_markup=make_keyboard_lvl(levels))
    # –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –æ—à–∏–±–∫–µ
    else:
        if message.text.lower() in stop:
            await exit_game(message, state)
        else:
            await message.answer(text=check[1])


async def exit_game(message: Message, state: FSMContext):
    await state.set_state(Games.choosing_game)
    await message.answer("üòî")
    await message.answer(f"{message.from_user.first_name}, –æ—á–µ–Ω—å –∂–∞–ª—å, "
                         f"—á—Ç–æ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –∏–≥—Ä–∞—Ç—å. –ñ–¥—É –≤–∞—Å —Å–Ω–æ–≤–∞.",
                         reply_markup=make_keyboard_games())


@dp.message()
async def begin(message: Message):
    """–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–∞—á–∞–ª–µ"""
    await message.answer("–¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–±–µ—Ä–∏—Ç–µ /start")


async def main() -> None:
    # Initialize Bot instance with a default parse mode which will be passed to all API calls
    bot = Bot(TBOT_API, parse_mode=ParseMode.HTML)
    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
